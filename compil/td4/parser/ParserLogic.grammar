%class "ParserLogic";

%terminals TRUE, FALSE, LPAR, RPAR, OR, AND, NOT,PLUS,MINUS,TIMES,DIV,LT,LG,LLE,GE,EQ,NE,NUMBER;
%typeof S ="ArithEX";
%typeof AE = "ArithEX";
%typeof LE = "ArithEX";
%typeof CE = "ArithEX";
%typeof NUMBER = "Number";
%typeof TRUE,FALSE = "Boolean";

%left RPAR;
%left  AND,OR;
%right NOT;
%right UNIMINUS;
%left TIMES,DIV;
%left PLUS,MINUS;


%goal S;

S 	=   	AE
			|		LE
			| 	CE
			;
AE	=			AE.x	PLUS	AE.y  												{:ArithEX arith=new ArithEX(x.getArithEX() + y.getArithEX());System.out.print(" "+arith.arithValue+" ");return arith;:}
			| 	AE.x	MINUS	AE.y													{:ArithEX arith =new ArithEX(x.getArithEX() - y.getArithEX()) ;System.out.print(" "+arith.arithValue+"r ");return arith;:}
			|	  MINUS AE.x 			@ UNIMINUS								{:ArithEX arith = new ArithEX(-x.getArithEX());				System.out.print(" "+arith.arithValue+" ");return arith;		:}
			| 	AE.x	TIMES	AE.y													{:ArithEX arith=new ArithEX(x.getArithEX() * y.getArithEX());System.out.print(" "+arith.arithValue+" ");return arith;	:}
			| 	AE.x	DIV	AE.y														{:ArithEX arith= new ArithEX(x.getArithEX() / y.getArithEX()); System.out.print(" "+arith.arithValue+" ");return arith;		:}
			| 	LPAR AE.x	RPAR														{:ArithEX arith= new ArithEX(x.getArithEX());				System.out.print(" "+arith.arithValue+" ");return arith;						:}
			|		NUMBER.x																	{:ArithEX arith= new ArithEX(x.doubleValue());		System.out.print(" "+arith.arithValue+" ");return arith;							:}
			;

LE = 			LE.x AND LE.y															{:ArithEX arith= new ArithEX(x.getLogicVa() && y.getLogicVa());System.out.print(" "+arith.logicValue+" ");return arith;		:}
			|		LE.x OR LE.y															{:ArithEX arith=new ArithEX(x.getLogicVa() || y.getLogicVa());System.out.print(" "+arith.logicValue+" ");return arith;		:}
			|		NOT LE.x																	{:ArithEX arith=new ArithEX( ! x.getLogicVa() );System.out.print(" "+arith.logicValue+" ");return arith;									:}
			| 	LPAR LE.x RPAR														{:ArithEX arith=new ArithEX(x.getLogicVa());		System.out.print(" "+arith.logicValue+" ");return arith;									:}
			| 	TRUE.x																		{:ArithEX arith=new ArithEX(x.booleanValue());	System.out.print(" "+arith.logicValue+" ");return arith;										:}
			| 	FALSE.x																		{:ArithEX arith=new ArithEX(x.booleanValue() );	System.out.print(" "+arith.logicValue+" ");return arith;									:}
			;

CE =			AE.x LT AE.y															{:ArithEX arith= new ArithEX(x.getArithEX() < y.getArithEX());	System.out.print(" "+arith.logicValue+" ");return arith;	:}
			|		AE.x LG AE.y															{:ArithEX arith=new ArithEX(x.getArithEX() > y.getArithEX());	System.out.print(" "+arith.logicValue+" ");return arith;	:}
			| 	AE.x LLE AE.y															{:ArithEX arith=new ArithEX(x.getArithEX() <= y.getArithEX()); System.out.print(" "+arith.logicValue+" ");return arith;		:}
			|		AE.x GE AE.y															{:ArithEX arith=new ArithEX(x.getArithEX() >= y.getArithEX()); System.out.print(" "+arith.logicValue+" ");return arith;		:}
			|		AE.x EQ AE.y															{:ArithEX arith=new ArithEX(x.getArithEX() == y.getArithEX()); System.out.print(" "+arith.logicValue+" ");return arith;		:}
			|		AE.x NE AE.y															{:ArithEX arith=new ArithEX(x.getArithEX() != y.getArithEX());	System.out.print(" "+arith.logicValue+" ");return arith;	:}
			;
