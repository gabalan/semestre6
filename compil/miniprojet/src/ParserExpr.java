import abstractTree.*;
import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "ParserExpr.grammar".
 */
public class ParserExpr extends Parser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pTaJbF0p4GXL#oIo098JTtk4D8IKrDJKrD2or250Y141H8226E0W7Y44Zq$2kkS9$3itS" +
		"IhHRu0$7gy$FCFDih3u0h99146aDeHmwzw4C$1ZJNKuyv4JIWqU9Yq6eKyHeZo5gDeCtMd9" +
		"h3Q9DTnUpSXO9H#RIL4i9oZMQq88KCyjRHYWvqebk#KSGmYlA54C8yqUMEY9uMg#iSRDQGv" +
		"giOZVEDghXyBQDfggabQWvlXrSpSqgTdYF37kLOyJv7VOwDl8udgK1v4NOiaoNXeCwHA9ab" +
		"MR9A2kehgOwI8pAcyJYPr$KvcI0B6b#IIR9EfiY6oVy5noav8JDaYroGCwrjgawhLkzRKLr" +
		"JtLRTKTrLtGlSjH#83rGF$$k$WFyu49VX6$91tiaRUIKlvDbMdjJnw7C$I4NkvKvkvOPHnN" +
		"TGXdrqs0T3Y96ZVVGJLipQ9H4I#aN#1mP4QJG=");


static public class MyEvents extends beaver.Parser.Events {

	public void syntaxError(Symbol token) {
		System.err.print("Erreur de syntaxe ligne ");
		System.err.println(Symbol.getLine(token.getStart()));
		System.err.print("Token inattendu: ");
		System.err.println(Terminals.NAMES[token.getId()]);
	}
};

	private final Action[] actions;

	public ParserExpr() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] Program = Declarations.d SEMI Expression.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_d = _symbols[offset + 1];
					final AbstTree d = (AbstTree) _symbol_d.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final AbstTree e = (AbstTree) _symbol_e.value;
					 return new Seq(d, e);
				}
			},
			new Action() {	// [1] Declarations = Declarations.d1 SEMI Declaration.d2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_d1 = _symbols[offset + 1];
					final AbstTree d1 = (AbstTree) _symbol_d1.value;
					final Symbol _symbol_d2 = _symbols[offset + 3];
					final AbstTree d2 = (AbstTree) _symbol_d2.value;
					 return new Seq(d1, d2);
				}
			},
			new Action() {	// [2] Declarations = Declaration.d
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_d = _symbols[offset + 1];
					final AbstTree d = (AbstTree) _symbol_d.value;
					 return d;
				}
			},
			new Action() {	// [3] Declaration = ID.id EQ Expression.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 1];
					final String id = (String) _symbol_id.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final AbstTree e = (AbstTree) _symbol_e.value;
					 return new Assignment(e, id);
				}
			},
			new Action() {	// [4] Expression = Expression.e1 PLUS Expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final AbstTree e1 = (AbstTree) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final AbstTree e2 = (AbstTree) _symbol_e2.value;
					 return new Operation(e1, e2,"PLUS");
				}
			},
			new Action() {	// [5] Expression = Expression.e1 MINUS Expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final AbstTree e1 = (AbstTree) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final AbstTree e2 = (AbstTree) _symbol_e2.value;
					 return new Operation(e1, e2,"MINUS");
				}
			},
			new Action() {	// [6] Expression = Expression.e1 TIMES Expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final AbstTree e1 = (AbstTree) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final AbstTree e2 = (AbstTree) _symbol_e2.value;
					 return new Operation(e1, e2,"TIMES");
				}
			},
			new Action() {	// [7] Expression = Expression.e1 DIV Expression.e2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final AbstTree e1 = (AbstTree) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final AbstTree e2 = (AbstTree) _symbol_e2.value;
					 return new Operation(e1, e2,"DIV");
				}
			},
			new Action() {	// [8] Expression = PLUS Expression.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final AbstTree e = (AbstTree) _symbol_e.value;
					return e;
				}
			},
			new Action() {	// [9] Expression = MINUS Expression.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final AbstTree e = (AbstTree) _symbol_e.value;
					 return new UMinus(e);
				}
			},
			new Action() {	// [10] Expression = LPAR Expression.e RPAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final AbstTree e = (AbstTree) _symbol_e.value;
					 return e;
				}
			},
			new Action() {	// [11] Expression = UFCT.fct LPAR Expression.e RPAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_fct = _symbols[offset + 1];
					final String fct = (String) _symbol_fct.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final AbstTree e = (AbstTree) _symbol_e.value;
					 return new UFct(e, fct);
				}
			},
			new Action() {	// [12] Expression = BFCT.fct LPAR Expression.e1 COMMA Expression.e2 RPAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_fct = _symbols[offset + 1];
					final String fct = (String) _symbol_fct.value;
					final Symbol _symbol_e1 = _symbols[offset + 3];
					final AbstTree e1 = (AbstTree) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 5];
					final AbstTree e2 = (AbstTree) _symbol_e2.value;
					 return new BFct(e1, e2, fct);
				}
			},
			new Action() {	// [13] Expression = ID.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 1];
					final String id = (String) _symbol_id.value;
					 return new Id(id);
				}
			},
			new Action() {	// [14] Expression = INTEGER.i
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final Integer i = (Integer) _symbol_i.value;
					 return new IntExp(i);
				}
			},
			new Action() {	// [15] Expression = FLOAT.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_f = _symbols[offset + 1];
					final Double f = (Double) _symbol_f.value;
					 return new FloatExp(f);
				}
			},
			new Action() {	// [16] Expression = PI.p
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_p = _symbols[offset + 1];
					final Double p = (Double) _symbol_p.value;
					 return new FloatExp(p);
				}
			},
			new Action() {	// [17] Expression = E.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 1];
					final Double e = (Double) _symbol_e.value;
					 return new FloatExp(e);
				}
			}
		};


	report = new MyEvents();
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
