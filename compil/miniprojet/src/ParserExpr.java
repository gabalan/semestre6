import abstractTree.*;
import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "ParserExpr.grammar".
 */
public class ParserExpr extends Parser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pLaKjBmr0GXK$Is8SrscjR7$LjjIktRjswTI62Qq445u8ReTMgM51H4DV#Hr$r$HfFRgO" +
		"bfFe3Ek6RCtFka6Iu06xWOm0pAC9W71EOn9HrnhhB4K4A7gQPv#3ABUPPPP15Z#OK2kqgq9" +
		"5sLmeh#RAQK3#9D7hHXtxaC8WyXZ2CKVd1BChopUp0vQnd9rESpNIb0tg6#pbsnm9F7MwTv" +
		"TvXThX$gmeqr#7xLdtjJEHn5MDlAyn0vGWsjaXL6DGDaYOxn90QAUbSMNL1TP7KoHLP8flg" +
		"NvDbiarMo6xW$mNZd9oHTR97Bic5dgsfhgfMLMkg#we7gdNLmyZxZsFVEr5j$FTFiVdJM5z" +
		"19EIJV91tyaPUoOkUFKVcdgGfZ$8WztB7hXbvXR4tdRS4Dv#W4wTrUnv94gU3uY$Rors4");

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};


static public class MyEvents extends beaver.Parser.Events {

	public void syntaxError(Symbol token) {
		System.err.print("Erreur de syntaxe ligne ");
		System.err.println(Symbol.getLine(token.getStart()));
		System.err.print("Token inattendu: ");
		System.err.println(Terminals.NAMES[token.getId()]);
	}
};

	private final Action[] actions;

	public ParserExpr() {
		super(PARSING_TABLES);
		actions = new Action[] {
			RETURN3,	// [0] Program = Declarations SEMI Expression; returns 'Expression' although none is marked
			new Action() {	// [1] Declarations = Declarations SEMI Declaration
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
				}
			},
			new Action() {	// [2] Declarations = Declaration
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
				}
			},
			RETURN3,	// [3] Declaration = ID EQ Expression; returns 'Expression' although none is marked
			RETURN3,	// [4] Expression = Expression PLUS Expression; returns 'Expression' although none is marked
			RETURN3,	// [5] Expression = Expression MINUS Expression; returns 'Expression' although none is marked
			RETURN3,	// [6] Expression = Expression TIMES Expression; returns 'Expression' although none is marked
			RETURN3,	// [7] Expression = Expression DIV Expression; returns 'Expression' although none is marked
			RETURN2,	// [8] Expression = MINUS Expression; returns 'Expression' although none is marked
			RETURN2,	// [9] Expression = LPAR Expression; returns 'Expression' although none is marked
			RETURN4,	// [10] Expression = UFCT LPAR Expression RPAR; returns 'RPAR' although none is marked
			RETURN6,	// [11] Expression = BFCT LPAR Expression COMMA Expression RPAR; returns 'RPAR' although none is marked
			Action.RETURN,	// [12] Expression = ID
			Action.RETURN,	// [13] Expression = INTEGER
			Action.RETURN,	// [14] Expression = FLOAT
			Action.RETURN,	// [15] Expression = PI
			Action.RETURN	// [16] Expression = E
		};


	report = new MyEvents();
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
