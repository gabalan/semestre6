%import "abstractTree.*";
%class "ParserExpr";

%embed {:

static public class MyEvents extends beaver.Parser.Events {

	public void syntaxError(Symbol token) {
		System.err.print("Erreur de syntaxe ligne ");
		System.err.println(Symbol.getLine(token.getStart()));
		System.err.print("Token inattendu: ");
		System.err.println(Terminals.NAMES[token.getId()]);
	}
};

:} ;

%init {:
	report = new MyEvents();
:};


%terminals PLUS, MINUS, TIMES, DIV, LPAR, RPAR;
%terminals UFCT, BFCT, ID, INTEGER, FLOAT, PI, E;
%terminals SEMI, EQ, COMMA;

%typeof PI, E, FLOAT = "Double";
%typeof INTEGER = "Integer";
%typeof ID, UFCT, BFCT = "String";
%typeof Program, Declarations, Declaration, Expression = "AbstTree";

%left RPAR;
%right UNARY_MINUS;
%left TIMES, DIV;
%left PLUS, MINUS;
%right LPAR;


%goal Program;

Program =
				Declarations SEMI Expression
				;

Declarations =
						Declarations SEMI Declaration
					| Declaration
					;

Declaration	 =
					 ID EQ Expression
					 ;

Expression 	=
					Expression PLUS Expression
				| Expression MINUS Expression
				| Expression TIMES Expression
				| Expression DIV Expression
				| MINUS Expression @ UNARY_MINUS
				| LPAR Expression
				| UFCT LPAR Expression RPAR {:System.out.println("fonction unaire"); return new Symbol (0);:}
				| BFCT LPAR Expression COMMA Expression RPAR{:System.out.println("je vois une fonction binaire");return new Symbol(0);:}
				| ID
				| INTEGER
				| FLOAT
				| PI
				| E
				;
