
%class "ParserExpr";

%embed {:

static public class MyEvents extends beaver.Parser.Events {

	public void syntaxError(Symbol token) {
		System.err.print("Erreur de syntaxe ligne ");
		System.err.println(Symbol.getLine(token.getStart()));
		System.err.print("Token inattendu: ");
		System.err.println(Terminals.NAMES[token.getId()]);
	}
};

:} ;

%init {:
	report = new MyEvents();
:};


%terminals PLUS, MINUS, TIMES, LPAR, RPAR;
%terminals  identificateur,valeur_entiere ;
%terminals SEMI, EQ,INT;

%typeof valeur_entiere= "Integer";
%typeof identificateur = "String";
%typeof program,instruction_list,instruction,instruction_simple,declaration,affectation,type_simple,expression,terme="Node";

%left RPAR;
%left PLUS, MINUS;

%goal program;
program = instruction_list
		;
instruction_list = instruction_list.list instruction.inst {:return new Seq(list,inst);:}
		  | instruction.inst {:return inst;:}

		  ;
instruction 	 = instruction_simple.Inst SEMI {: return inst;:}
		 ;

instruction_simple = declaration.d {:return d ;:}
		   | affectation.a {:return a;:}
		   ;

declaration 	= type_simple.ts identificateur.id {:return new Declaration(ts,id);:}

		;

affectation 	= identificateur.id EQ expression.e {:return new Aff(id,e);:}
		;

type_simple 	= INT 
		;
expression 	= terme.t PLUS expression.e {:return new Operation(t,e,"PLUS");:}
		| terme.t MINUS expression.e {:return new Operation(t,e,"MINUS");:}
		| terme.t {:return new Operation(t);:}
		;
terme 		= facteur.fact TIMES terme.t {:return new Operation(fact,t,"TIMES");:}
    	 	| facteur
    	 	;
 facteur=	 PLUS facteur.fact {:return new Operation();:}
     		| MINUS facteur.fact {:return new Operation(fact,"MINUS");:}
     		| LPAR expression RPAR {:return e ;:}
      		| identificateur.id {: return new Id(id);:}
      		| valeur_entiere.ent {:return new IntE(ent);:}


		;






