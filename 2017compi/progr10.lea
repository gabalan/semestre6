/* **************************************************
 *
 * Ce fichier teste des indirections plus complexes
 *
 * Affichage attendu:
 * true
 * 65508
 * 65516
 * 65524
 * 65532
 * 65540
 * 65548
 * 65556
 * 65564
 * 65572
 * 65580
 * -2
 * &0000000D (ou autre adresse non nulle)
 * 456789123
 * 123456789
 * null
 * 36
 * -1
 * true
 * true
 ************************************************** */
var
b : boolean;
a : array [1..10] of integer;
c : array [1..10] of array [1..3] of integer;
x, y : integer;
w, z : ^integer;
p : ^array[1..10] of integer;

begin
b := true;
println(b);
x := 1;
while (x <= 10) do begin
       a[x] := 65500 + x * (16 / 2);
       x := x + 1;
       end
x := 1;
while (x <= 10) do begin
       println(a[x]);
       x := x + 1;
       end
c[1][1] := 0xFFFFFFFA;
c[1][2] := 0xFFFFFFFB;
c[1][3] := 0xFFFFFFFC;
c[2][1] := 0xFFFFFFFD;
c[2][2] := 0xFFFFFFFE;
c[2][3] := 0xFFFFFFFF;
println(c[2][2]);
new(w);
w^ := 456789123;
new(z);
println(z);
z^ := 123456789;
println(w^);
println(z^);
dispose(z);
println(z);
new(p);
p^[8] := 36;
println(p^[8]);
y := -1;
println(y);
b := 1 + 2 - 3 * 4 / 5 < 6 && 7 <= 8 && 9 > 10 || -11 >= 12 || !(13 = 14) && 15 != 16; 
println (b);
end
