/* **************************************************
 *
 * Ce fichier teste l'analyseur syntaxique et sémantique
 * usage:
 * a) décommenter une des lignes ou plusieurs
 * b) ./parser progr1.lea
 *
 ************************************************** */

type

caractere = character;
entier = integer;
booleen = boolean;
car = caractere;
//car = caractere; // error "Type car yet declared"
//carac = caracter; // error "Unknown type"

Months = (January, February, March, April, May, June, July, August, September, October, November, December);
DaysOfWeek = (Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday);

range1 = 64 .. 81;
range2 = Monday .. Friday;
range3 = Monday .. Thursday;
//range4 = Friday .. Tuesday; // error "range not valid"
//range5 = Monday .. April; // error "incoherent range"

table1 = array [ 1 .. 32 ] of array [ range3 ] of integer;
//table2 = array [ 1 .. 32 ] of array [ DaysOfWeek ] of integer; // error "Range type expected"
//table3 = array [ 1 .. 32 ] of array [ Wednesday..Saturday ] of integer;

ptr = ^integer;

var

x, y, z : integer;
//x : boolean; // error "Variable x yet declared"
b : boolean;
z2 : array [ 1 .. 32] of integer;
k : array [ range2 ] of integer;
l : array [ range2 ] of boolean;
m2 : array [ Monday .. Thursday ] of boolean;
p : ptr;
m : Months;
r1: range1;
r2: range2;
x2 : boolean;


function goo(i : integer, j : integer) : boolean;
//function goo(i : integer, j : integer) : boolean; //error "procedure or function declared twice"

function foo(i : integer, j : integer) : ^boolean
var
	result : ^boolean;
begin
	new(result);
	//result^ := hoo(i, j); // error "function not declared"
	result^ := goo(i, j);
	return (result);
end

function goo(i : integer, j : integer) : boolean
begin
	return (i+j);
end

//function goo(i : integer, j : integer) : boolean { return false; } // error "function already defined"

begin
	b := false;
	//b := 2; // error "Type error in affectation"
	//l := m2; // error "Type error in affectation"
	
	b := foo(3, 7)^;
	b := goo(3, 7);
	//b := foo(3); // error "Type error in calling expression"
	//b := foo(3, false); // error "Type error in calling expression"
	//x := foo(3, 7); // error "Type error in calling expression"
	
	//z2 [ Thursday ] := 36; // error "Type error in array access "
	z2 [ 1 ] := 36;
	x := z2 [ 1 ];
	b := goo(z2 [ 1 ], 1);
	//y := z [ false ]; // error "Type error in array access"
	//y := z [ 4 ]; // error "Type error in affectation"
	//b := z [ 4 ]; // error "Type error in affectation"
	//z := k [ 4 ]; // error "Type error in affectation"
	//b := z2 [ Thursday ]; // error "Type error in affectation"
	// z2 := 36; // Accessible variable expected
	

	if (l [ Monday ]) then x := 1;
	//if (z2 [ 7 ]) then x := 1;

	x := -(36 + 45 / 7);
	//b := !(2 < false) && (x = 1) && (p = null); // // error "Type error in comparison"
	//b := !(2 < x) && (x = 1) && p ; // // error "Type error in logical expression"
	//b := !(2 < x) && (x = 1 + false) && p ; // // error "Type error in arithmetic expression"

	p := null;
	//p := 0; // error "Type error in affectation"
	new (p);
	//new (x); // error "Type error in pointer access expression"
	p^ := 36;
	//p^ := false;
	//x^ := null; // error "Type error in pointer access expression"
	x := p^;
	dispose (p);
	//dispose (x);  // error "Type error in pointer access expression"
	

end
