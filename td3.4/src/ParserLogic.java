import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "ParserLogic.grammar".
 */
public class ParserLogic extends Parser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9nrJziAmZ0CFNREhUrqWu4FAkYB$#bNUziqddIs5c61SyaX2GJ06HuM3XkiKC38DVLpgdD" +
		"Du9PSYc296XNMMC0mrKudVUhdT9hxCNXFBvLqtOKaBCg9s1ELPgm3uTL7i5hY#FLzpBa#PZ" +
		"FRpE$#zhlCzp6RH5x4MmRoA4zvXEnEt6Xi#DFn7qUrL4kj4mh2eFa0XxSePG==");

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	private final Action[] actions;

	public ParserLogic() {
		super(PARSING_TABLES);
		actions = new Action[] {
			Action.RETURN,	// [0] S = E
			RETURN3,	// [1] E = T OR T; returns 'T' although none is marked
			Action.RETURN,	// [2] E = T
			RETURN3,	// [3] T = F AND F; returns 'F' although none is marked
			Action.RETURN,	// [4] T = F
			Action.RETURN,	// [5] F = CONST
			Action.RETURN,	// [6] F = VAR
			RETURN3,	// [7] F = LPAR E RPAR; returns 'RPAR' although none is marked
			RETURN2	// [8] F = NOT E; returns 'E' although none is marked
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
