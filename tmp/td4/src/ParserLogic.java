import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "ParserLogic.grammar".
 */
public class ParserLogic extends Parser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9obaCiEWZ0KH0S4bRRuGeakJDXeZ8c4nAK$vqVxVjLfBQHnIvCpSpjfxwK0E40XWO34k5K" +
		"L8zGdT37GDsJSHQnx#ee#lOCHDSMCEiI4EaM0a7d4asqgCrkPIO3xabyjw8cTBPmAgq1#f6" +
		"WkseP4f2HhazikG6Ng6gu1AKX6jYwRaprPafrtTk6y#EknylSkgtlvzqldbPVbQ9Q#w3lrp" +
		"0TyzBj9N#HXgoT5ygM1H#m8BOgPul#JT4bFlzq6BWi=");

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	private final Action[] actions;

	public ParserLogic() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] X = VAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 System.out.println("var"); return new Symbol(0);
				}
			},
			new Action() {	// [1] X = TRUE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 System.out.println("1"); return new Symbol(0);
				}
			},
			new Action() {	// [2] X = FALSE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 System.out.println("0"); return new Symbol(0);
				}
			},
			new Action() {	// [3] X = PAR_IN X OR X PAR_OUT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 System.out.println("or"); return new Symbol(0);
				}
			},
			new Action() {	// [4] X = PAR_IN X AND X PAR_OUT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 System.out.println("and"); return new Symbol(0);
				}
			},
			new Action() {	// [5] X = NOT X
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 System.out.println("not"); return new Symbol(0);
				}
			},
			new Action() {	// [6] X = X NEWLINE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 System.out.println("x ln"); return new Symbol(0);
				}
			},
			Action.RETURN,	// [7] T = F
			RETURN3,	// [8] T = F AND F; returns 'F' although none is marked
			Action.RETURN,	// [9] F = X
			RETURN3	// [10] F = X OR X; returns 'X' although none is marked
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
