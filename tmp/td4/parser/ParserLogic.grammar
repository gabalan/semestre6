%class "ParserLogic";

%terminals TRUE, FALSE, LPAR, RPAR, OR, AND, NOT,PLUS,MINUS,TIMES,DIV,LT,LG,LLE,GE,EQ,NE,NUMBER;
%typeof S ="ArithEX";
%typeof AE = "ArithEX";
%typeof LE = "ArithEX";
%typeof CE = "ArithEX";
%typeof NUMBER = "Number";
%typeof TRUE,FALSE = "Boolean";

%left RPAR;
%left  AND,OR;
%right NOT;
%right UNIMINUS;
%left TIMES,DIV;
%left PLUS,MINUS;


%goal S;

S 	=   	AE   
			|		LE
			| 	CE
			;
AE	=			AE.x	PLUS	AE.y  												{:return new ArithEX(x.getArithEX() + y.getArithEX());		:}
			| 	AE.x	MINUS	AE.y													{:return new ArithEX(x.getArithEX() - y.getArithEX());		:}
			|	  MINUS AE.x 			@ UNIMINUS								{:return new ArithEX(-x.getArithEX());									:}
			| 	AE.x	TIMES	AE.y													{:return new ArithEX(x.getArithEX() * y.getArithEX());		:}
			| 	AE.x	DIV	AE.y														{:return new ArithEX(x.getArithEX() / y.getArithEX());		:}
			| 	LPAR AE.x	RPAR														{:return new ArithEX(x.getArithEX());										:}
			|		NUMBER.x																	{:return new ArithEX(x.doubleValue());									:}
			;

LE = 			LE.x AND LE.y															{:return new ArithEX(x.getLogicVa() && y.getLogicVa());		:}
			|		LE.x OR LE.y															{:return new ArithEX(x.getLogicVa() || y.getLogicVa());		:}
			|		NOT LE.x																	{:return new ArithEX( ! x.getLogicVa() );									:}
			| 	LPAR LE.x RPAR														{:return new ArithEX(x.getLogicVa());											:}
			| 	TRUE.x																		{:return new ArithEX(x.booleanValue());											:}
			| 	FALSE.x																		{:return new ArithEX(x.booleanValue() );										:}
			;

CE =			AE.x LT AE.y															{:return new ArithEX(x.getArithEX() < y.getArithEX());		:}
			|		AE.x LG AE.y															{:return new ArithEX(x.getArithEX() > y.getArithEX());		:}
			| 	AE.x LLE AE.y															{:return new ArithEX(x.getArithEX() <= y.getArithEX());		:}
			|		AE.x GE AE.y															{:return new ArithEX(x.getArithEX() >= y.getArithEX());		:}
			|		AE.x EQ AE.y															{:return new ArithEX(x.getArithEX() == y.getArithEX());		:}
			|		AE.x NE AE.y															{:return new ArithEX(x.getArithEX() != y.getArithEX());		:}
			;
